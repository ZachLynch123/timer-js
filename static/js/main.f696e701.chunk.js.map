{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getSeconds","state","secondsElapsed","slice","getMinutes","Math","floor","handleStart","isRunning","setState","incrimenter","setInterval","handleStop","clearInterval","handleWork","handleBreak","checkForBreak","breakTime","breaktime","react_default","a","createElement","className","reactstrap_es","id","align","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f696e701.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Button, Container, Col, Row} from 'reactstrap';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      secondsElapsed: 1500,\n      isRunning: false,\n      breakTime: false\n    }\n  }\n\n  getSeconds = () => {\n    return ('0' + this.state.secondsElapsed % 60).slice(-2);\n  }\n\n  getMinutes = () => {\n    return Math.floor((this.state.secondsElapsed / 60));\n  }\n\n  handleStart = () => {\n    if (!this.state.isRunning){\n      this.setState({\n        isRunning: true\n      });\n      this.incrimenter = setInterval(() => {\n        this.setState({\n          secondsElapsed: (this.state.secondsElapsed - 1),\n        })\n      }, 1000);\n  }\n}\n\n  handleStop = () => {\n    this.setState({\n      isRunning: false\n    });\n    clearInterval(this.incrimenter);\n}\n\n  handleWork = () => {\n    this.setState({\n      secondsElapsed: 1500,\n      isRunning: false,\n    });\n    clearInterval(this.incrimenter);\n  }\n\n  handleBreak = () => {\n    this.setState({\n      secondsElapsed: 300,\n      isRunning: false\n    });\n    clearInterval(this.incrimenter);\n  }\n\n  checkForBreak = () => {\n    if (!this.state.breakTime && this.state.secondsElapsed === -1) {\n      clearInterval(this.incrimenter);\n      this.setState({\n        secondsElapsed: 300,\n        isRunning: false,\n        breakTime: true\n      });\n  } else if (this.state.breakTime && this.state.secondsElapsed === -1) {\n    clearInterval(this.incrimenter);\n    this.setState({\n      secondsElapsed: 1500,\n      isRunning: false,\n      breaktime: false\n    });\n  }\n}\n\n  render() {\n\n    this.checkForBreak();\n\n    return (\n      <div className=\"App\">\n      <Container id=\"leaf-container\">\n      <Row>\n        <Col id=\"leaf-col\" align=\"center\">\n          <div className=\"leaf\"></div>\n        </Col>\n      </Row>\n\n      </Container>\n\n      <Container id=\"apple\">\n      <Row>\n        <Col>\n        <p className=\"h1\" id=\"x\">My \"Apple\" Watch</p>\n        </Col>\n      </Row>\n      <Row className=\"w-30 p3\">\n        <Col id=\"timer-box\">\n        <h1 className=\"timer\">{this.getMinutes()}:{this.getSeconds()}</h1>\n        </Col>\n      </Row>\n      <Row id=\"button-row\">\n        <Col>\n          <Button className=\"btn-success btn-md\"\n            onClick={this.handleStart}\n            >Start</Button>\n        </Col>\n        <Col>\n          <Button className=\"btn-info btn-md\"\n            onClick={this.handleWork}\n          >Work</Button>\n        </Col>\n        <Col>\n          <Button className=\"btn-dark btn-md\"\n          onClick={this.handleBreak}\n          >Break</Button>\n        </Col>\n        <Col>\n          <Button className=\"btn-danger btn-md\"\n            onClick={this.handleStop}\n            >Stop</Button>\n        </Col>\n      </Row>\n          \n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}